
main_mod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000dc  008000dc  000006b4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018c  00000000  00000000  00000e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000991  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000432  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000823  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ac  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005f2  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000070  00000000  00000000  00002f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3d       	cpi	r26, 0xDC	; 220
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac ed       	ldi	r26, 0xDC	; 220
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3f       	cpi	r26, 0xFD	; 253
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <fitPowerInByte>:
	COLORGREENPORT 		&= (~COLORGREEN);
	COLORBLUEPORT 		&= (~COLORBLUE);
}

char fitPowerInByte(char power){
	return ( ( (power << 4) & 0xF0 ) | power );
  92:	98 2f       	mov	r25, r24
  94:	92 95       	swap	r25
  96:	90 7f       	andi	r25, 0xF0	; 240
}
  98:	89 2b       	or	r24, r25
  9a:	08 95       	ret

0000009c <main>:

#define POINTNUMBER 1
#define POINTPOWER 2

int main ()
{
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	27 97       	sbiw	r28, 0x07	; 7
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
	Init_Spi();
  b8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Init_Spi>
	RFM73_Initialize();
  bc:	0e 94 9e 01 	call	0x33c	; 0x33c <RFM73_Initialize>
	SwitchToRxMode();
  c0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SwitchToRxMode>

	COLORYELOWDDRPORT 	|= COLORYELOW;
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	80 6f       	ori	r24, 0xF0	; 240
  c8:	8a bb       	out	0x1a, r24	; 26
	COLORYELOWPORT 		|= COLORYELOW;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	80 6f       	ori	r24, 0xF0	; 240
  ce:	8b bb       	out	0x1b, r24	; 27
	COLORGREENDDRPORT 	|= COLORGREEN;
  d0:	84 b3       	in	r24, 0x14	; 20
  d2:	80 6f       	ori	r24, 0xF0	; 240
  d4:	84 bb       	out	0x14, r24	; 20
	COLORGREENPORT 		|= COLORGREEN;
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	80 6f       	ori	r24, 0xF0	; 240
  da:	85 bb       	out	0x15, r24	; 21
	COLORBLUEDDRPORT 	|= COLORBLUE;
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	84 bb       	out	0x14, r24	; 20
	COLORBLUEPORT 		|= COLORBLUE;
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e7       	ldi	r24, 0x7F	; 127
  ea:	9a e1       	ldi	r25, 0x1A	; 26
  ec:	a6 e0       	ldi	r26, 0x06	; 6
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	a0 40       	sbci	r26, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x52>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x5c>
  f8:	00 00       	nop
#define UNITCOUNT 6

	while (1)
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;
  fa:	80 e0       	ldi	r24, 0x00	; 0
		for(char i = 0; i < 96; i++){
			_delay_ms(10);

			UINT8 len = Receive_Packet(rx_buf, MAX_PACKET_LEN);
			if (len > 0){
				if (rx_buf[POINTPOWER] < less_power[rx_buf[POINTNUMBER]])
  fc:	8e 01       	movw	r16, r28
  fe:	0f 5f       	subi	r16, 0xFF	; 255
 100:	1f 4f       	sbci	r17, 0xFF	; 255
				less_power[n] = less_power[n*2];
			else
				less_power[n] = less_power[n*2 +1]; 
		}

		char power = fitPowerInByte(POWERCOUNT - less_power[0]);
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	f2 2e       	mov	r15, r18
#define UNITCOUNT 6

	while (1)
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;
 106:	95 e0       	ldi	r25, 0x05	; 5
 108:	e9 2e       	mov	r14, r25
 10a:	05 c0       	rjmp	.+10     	; 0x116 <main+0x7a>
 10c:	f8 01       	movw	r30, r16
 10e:	e8 0f       	add	r30, r24
 110:	f1 1d       	adc	r31, r1
 112:	e0 82       	st	Z, r14
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	86 30       	cpi	r24, 0x06	; 6
 118:	c8 f3       	brcs	.-14     	; 0x10c <main+0x70>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	a3 ec       	ldi	r26, 0xC3	; 195
 11e:	b9 e0       	ldi	r27, 0x09	; 9
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x84>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x8a>
 126:	00 00       	nop

		// get statistic of unit power 
		for(char i = 0; i < 96; i++){
			_delay_ms(10);

			UINT8 len = Receive_Packet(rx_buf, MAX_PACKET_LEN);
 128:	8c ed       	ldi	r24, 0xDC	; 220
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	60 e2       	ldi	r22, 0x20	; 32
 12e:	2f 83       	std	Y+7, r18	; 0x07
 130:	0e 94 a4 02 	call	0x548	; 0x548 <Receive_Packet>
			if (len > 0){
 134:	2f 81       	ldd	r18, Y+7	; 0x07
 136:	88 23       	and	r24, r24
 138:	59 f0       	breq	.+22     	; 0x150 <main+0xb4>
				if (rx_buf[POINTPOWER] < less_power[rx_buf[POINTNUMBER]])
 13a:	80 91 de 00 	lds	r24, 0x00DE
 13e:	90 91 dd 00 	lds	r25, 0x00DD
 142:	f8 01       	movw	r30, r16
 144:	e9 0f       	add	r30, r25
 146:	f1 1d       	adc	r31, r1
 148:	90 81       	ld	r25, Z
 14a:	89 17       	cp	r24, r25
 14c:	08 f4       	brcc	.+2      	; 0x150 <main+0xb4>
					less_power[rx_buf[POINTNUMBER]] = rx_buf[POINTPOWER];
 14e:	80 83       	st	Z, r24
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;

		// get statistic of unit power 
		for(char i = 0; i < 96; i++){
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	20 36       	cpi	r18, 0x60	; 96
 154:	19 f7       	brne	.-58     	; 0x11c <main+0x80>

#define ALLLEDON	0xFF
#define ALLLEDOFF	0x00

inline void shutDownLeds(){
	COLORYELOWPORT 		&= (~COLORYELOW);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	8b bb       	out	0x1b, r24	; 27
	COLORGREENPORT 		&= (~COLORGREEN);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	85 bb       	out	0x15, r24	; 21
	COLORBLUEPORT 		&= (~COLORBLUE);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	85 bb       	out	0x15, r24	; 21

		// show statistic
		shutDownLeds();

		for (char n=0; n < (UNITCOUNT / 2); n++){
			if (less_power[n*2] < less_power[n*2 + 1])
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	99 81       	ldd	r25, Y+1	; 0x01
 16c:	98 17       	cp	r25, r24
 16e:	08 f0       	brcs	.+2      	; 0x172 <main+0xd6>
				less_power[n] = less_power[n*2];
			else
				less_power[n] = less_power[n*2 +1]; 
 170:	89 83       	std	Y+1, r24	; 0x01

		// show statistic
		shutDownLeds();

		for (char n=0; n < (UNITCOUNT / 2); n++){
			if (less_power[n*2] < less_power[n*2 + 1])
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	89 17       	cp	r24, r25
 178:	10 f0       	brcs	.+4      	; 0x17e <main+0xe2>
				less_power[n] = less_power[n*2];
			else
				less_power[n] = less_power[n*2 +1]; 
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0xe4>
		// show statistic
		shutDownLeds();

		for (char n=0; n < (UNITCOUNT / 2); n++){
			if (less_power[n*2] < less_power[n*2 + 1])
				less_power[n] = less_power[n*2];
 17e:	8a 83       	std	Y+2, r24	; 0x02

		// show statistic
		shutDownLeds();

		for (char n=0; n < (UNITCOUNT / 2); n++){
			if (less_power[n*2] < less_power[n*2 + 1])
 180:	8d 81       	ldd	r24, Y+5	; 0x05
 182:	9e 81       	ldd	r25, Y+6	; 0x06
 184:	89 17       	cp	r24, r25
 186:	10 f0       	brcs	.+4      	; 0x18c <main+0xf0>
				less_power[n] = less_power[n*2];
			else
				less_power[n] = less_power[n*2 +1]; 
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	01 c0       	rjmp	.+2      	; 0x18e <main+0xf2>
		// show statistic
		shutDownLeds();

		for (char n=0; n < (UNITCOUNT / 2); n++){
			if (less_power[n*2] < less_power[n*2 + 1])
				less_power[n] = less_power[n*2];
 18c:	8b 83       	std	Y+3, r24	; 0x03
			else
				less_power[n] = less_power[n*2 +1]; 
		}

		char power = fitPowerInByte(POWERCOUNT - less_power[0]);
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	bf 2d       	mov	r27, r15
 192:	b8 1b       	sub	r27, r24
 194:	8b 2f       	mov	r24, r27
		COLORYELOWPORT &= (power | (~COLORYELOW));
 196:	9b b3       	in	r25, 0x1b	; 27
	COLORGREENPORT 		&= (~COLORGREEN);
	COLORBLUEPORT 		&= (~COLORBLUE);
}

char fitPowerInByte(char power){
	return ( ( (power << 4) & 0xF0 ) | power );
 198:	2b 2f       	mov	r18, r27
 19a:	2f 60       	ori	r18, 0x0F	; 15
 19c:	82 95       	swap	r24
 19e:	80 7f       	andi	r24, 0xF0	; 240
			else
				less_power[n] = less_power[n*2 +1]; 
		}

		char power = fitPowerInByte(POWERCOUNT - less_power[0]);
		COLORYELOWPORT &= (power | (~COLORYELOW));
 1a0:	82 2b       	or	r24, r18
 1a2:	89 23       	and	r24, r25
 1a4:	8b bb       	out	0x1b, r24	; 27

		power = fitPowerInByte(POWERCOUNT - less_power[1]);
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	9f 2d       	mov	r25, r15
 1aa:	98 1b       	sub	r25, r24
 1ac:	89 2f       	mov	r24, r25
		COLORGREENPORT &= (power | (~COLORGREEN));
 1ae:	95 b3       	in	r25, 0x15	; 21
	COLORGREENPORT 		&= (~COLORGREEN);
	COLORBLUEPORT 		&= (~COLORBLUE);
}

char fitPowerInByte(char power){
	return ( ( (power << 4) & 0xF0 ) | power );
 1b0:	28 2f       	mov	r18, r24
 1b2:	2f 60       	ori	r18, 0x0F	; 15
 1b4:	82 95       	swap	r24
 1b6:	80 7f       	andi	r24, 0xF0	; 240

		char power = fitPowerInByte(POWERCOUNT - less_power[0]);
		COLORYELOWPORT &= (power | (~COLORYELOW));

		power = fitPowerInByte(POWERCOUNT - less_power[1]);
		COLORGREENPORT &= (power | (~COLORGREEN));
 1b8:	82 2b       	or	r24, r18
 1ba:	89 23       	and	r24, r25
 1bc:	85 bb       	out	0x15, r24	; 21

		power = fitPowerInByte(POWERCOUNT - less_power[2]);
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	af 2d       	mov	r26, r15
 1c2:	a8 1b       	sub	r26, r24
 1c4:	8a 2f       	mov	r24, r26
		COLORBLUEPORT &= (power | (~COLORBLUE));
 1c6:	95 b3       	in	r25, 0x15	; 21
 1c8:	80 6f       	ori	r24, 0xF0	; 240
 1ca:	89 23       	and	r24, r25
 1cc:	85 bb       	out	0x15, r24	; 21
#define UNITCOUNT 6

	while (1)
	{
		char less_power[UNITCOUNT];
		for (char j=0; j<UNITCOUNT; j++) less_power[j] = NOSIGNAL;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	9d cf       	rjmp	.-198    	; 0x10c <main+0x70>

000001d2 <Init_Spi>:
 1d2:	18 ba       	out	0x18, r1	; 24
 1d4:	88 eb       	ldi	r24, 0xB8	; 184
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	81 e5       	ldi	r24, 0x51	; 81
 1da:	8d b9       	out	0x0d, r24	; 13
 1dc:	1e b8       	out	0x0e, r1	; 14
 1de:	08 95       	ret

000001e0 <ReadWrite_Spi>:
 1e0:	8f b9       	out	0x0f, r24	; 15
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <ReadWrite_Spi+0x2>
 1e6:	8f b1       	in	r24, 0x0f	; 15
 1e8:	08 95       	ret

000001ea <SPI_Write_Reg>:
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	c4 98       	cbi	0x18, 4	; 24
 1f6:	69 83       	std	Y+1, r22	; 0x01
 1f8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 1fc:	80 93 fc 00 	sts	0x00FC, r24
 200:	69 81       	ldd	r22, Y+1	; 0x01
 202:	86 2f       	mov	r24, r22
 204:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 208:	c4 9a       	sbi	0x18, 4	; 24
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <SPI_Read_Reg>:
 212:	c4 98       	cbi	0x18, 4	; 24
 214:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 218:	80 93 fc 00 	sts	0x00FC, r24
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 222:	c4 9a       	sbi	0x18, 4	; 24
 224:	08 95       	ret

00000226 <SPI_Read_Buf>:
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	16 2f       	mov	r17, r22
 23a:	04 2f       	mov	r16, r20
 23c:	c4 98       	cbi	0x18, 4	; 24
 23e:	79 83       	std	Y+1, r23	; 0x01
 240:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 244:	79 81       	ldd	r23, Y+1	; 0x01
 246:	41 2f       	mov	r20, r17
 248:	57 2f       	mov	r21, r23
 24a:	7a 01       	movw	r14, r20
 24c:	06 c0       	rjmp	.+12     	; 0x25a <SPI_Read_Buf+0x34>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 254:	f7 01       	movw	r30, r14
 256:	81 93       	st	Z+, r24
 258:	7f 01       	movw	r14, r30
 25a:	8e 2d       	mov	r24, r14
 25c:	81 1b       	sub	r24, r17
 25e:	80 17       	cp	r24, r16
 260:	b0 f3       	brcs	.-20     	; 0x24e <SPI_Read_Buf+0x28>
 262:	c4 9a       	sbi	0x18, 4	; 24
 264:	0f 90       	pop	r0
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

00000274 <SPI_Write_Buf>:
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	0f 92       	push	r0
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	16 2f       	mov	r17, r22
 288:	04 2f       	mov	r16, r20
 28a:	c4 98       	cbi	0x18, 4	; 24
 28c:	79 83       	std	Y+1, r23	; 0x01
 28e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 292:	80 93 fc 00 	sts	0x00FC, r24
 296:	79 81       	ldd	r23, Y+1	; 0x01
 298:	41 2f       	mov	r20, r17
 29a:	57 2f       	mov	r21, r23
 29c:	7a 01       	movw	r14, r20
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <SPI_Write_Buf+0x36>
 2a0:	f7 01       	movw	r30, r14
 2a2:	81 91       	ld	r24, Z+
 2a4:	7f 01       	movw	r14, r30
 2a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ReadWrite_Spi>
 2aa:	8e 2d       	mov	r24, r14
 2ac:	81 1b       	sub	r24, r17
 2ae:	80 17       	cp	r24, r16
 2b0:	b8 f3       	brcs	.-18     	; 0x2a0 <SPI_Write_Buf+0x2c>
 2b2:	c4 9a       	sbi	0x18, 4	; 24
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	08 95       	ret

000002c4 <SwitchToRxMode>:
 2c4:	82 ee       	ldi	r24, 0xE2	; 226
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 2cc:	87 e0       	ldi	r24, 0x07	; 7
 2ce:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 2d2:	68 2f       	mov	r22, r24
 2d4:	87 e2       	ldi	r24, 0x27	; 39
 2d6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 2da:	c3 98       	cbi	0x18, 3	; 24
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 2e2:	68 2f       	mov	r22, r24
 2e4:	61 60       	ori	r22, 0x01	; 1
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 2ec:	c3 9a       	sbi	0x18, 3	; 24
 2ee:	08 95       	ret

000002f0 <SwitchToTxMode>:
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 2f8:	c3 98       	cbi	0x18, 3	; 24
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 300:	68 2f       	mov	r22, r24
 302:	6e 7f       	andi	r22, 0xFE	; 254
 304:	80 e2       	ldi	r24, 0x20	; 32
 306:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 30a:	c3 9a       	sbi	0x18, 3	; 24
 30c:	08 95       	ret

0000030e <SwitchCFG>:
 30e:	1f 93       	push	r17
 310:	18 2f       	mov	r17, r24
 312:	87 e0       	ldi	r24, 0x07	; 7
 314:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 318:	87 ff       	sbrs	r24, 7
 31a:	03 c0       	rjmp	.+6      	; 0x322 <SwitchCFG+0x14>
 31c:	11 23       	and	r17, r17
 31e:	19 f0       	breq	.+6      	; 0x326 <SwitchCFG+0x18>
 320:	06 c0       	rjmp	.+12     	; 0x32e <SwitchCFG+0x20>
 322:	11 23       	and	r17, r17
 324:	21 f0       	breq	.+8      	; 0x32e <SwitchCFG+0x20>
 326:	80 e5       	ldi	r24, 0x50	; 80
 328:	63 e5       	ldi	r22, 0x53	; 83
 32a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 32e:	1f 91       	pop	r17
 330:	08 95       	ret

00000332 <SetChannelNum>:
 332:	68 2f       	mov	r22, r24
 334:	85 e2       	ldi	r24, 0x25	; 37
 336:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 33a:	08 95       	ret

0000033c <RFM73_Initialize>:
 33c:	cf 92       	push	r12
 33e:	df 92       	push	r13
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	2d 97       	sbiw	r28, 0x0d	; 13
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	8f e4       	ldi	r24, 0x4F	; 79
 35e:	93 ec       	ldi	r25, 0xC3	; 195
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <RFM73_Initialize+0x24>
 364:	00 c0       	rjmp	.+0      	; 0x366 <RFM73_Initialize+0x2a>
 366:	00 00       	nop
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 87 01 	call	0x30e	; 0x30e <SwitchCFG>
 36e:	03 ea       	ldi	r16, 0xA3	; 163
 370:	10 e0       	ldi	r17, 0x00	; 0
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	80 62       	ori	r24, 0x20	; 32
 378:	61 81       	ldd	r22, Z+1	; 0x01
 37a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 37e:	0e 5f       	subi	r16, 0xFE	; 254
 380:	1f 4f       	sbci	r17, 0xFF	; 255
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	0b 3c       	cpi	r16, 0xCB	; 203
 386:	1f 07       	cpc	r17, r31
 388:	a1 f7       	brne	.-24     	; 0x372 <RFM73_Initialize+0x36>
 38a:	34 e3       	ldi	r19, 0x34	; 52
 38c:	c3 2e       	mov	r12, r19
 38e:	c9 82       	std	Y+1, r12	; 0x01
 390:	23 e4       	ldi	r18, 0x43	; 67
 392:	d2 2e       	mov	r13, r18
 394:	da 82       	std	Y+2, r13	; 0x02
 396:	90 e1       	ldi	r25, 0x10	; 16
 398:	e9 2e       	mov	r14, r25
 39a:	eb 82       	std	Y+3, r14	; 0x03
 39c:	ec 82       	std	Y+4, r14	; 0x04
 39e:	ff 24       	eor	r15, r15
 3a0:	f3 94       	inc	r15
 3a2:	fd 82       	std	Y+5, r15	; 0x05
 3a4:	8a e2       	ldi	r24, 0x2A	; 42
 3a6:	8e 01       	movw	r16, r28
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
 3ac:	b8 01       	movw	r22, r16
 3ae:	45 e0       	ldi	r20, 0x05	; 5
 3b0:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 3b4:	89 e3       	ldi	r24, 0x39	; 57
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	88 e3       	ldi	r24, 0x38	; 56
 3ba:	8a 83       	std	Y+2, r24	; 0x02
 3bc:	87 e3       	ldi	r24, 0x37	; 55
 3be:	8b 83       	std	Y+3, r24	; 0x03
 3c0:	86 e3       	ldi	r24, 0x36	; 54
 3c2:	8c 83       	std	Y+4, r24	; 0x04
 3c4:	82 ec       	ldi	r24, 0xC2	; 194
 3c6:	8d 83       	std	Y+5, r24	; 0x05
 3c8:	8b e2       	ldi	r24, 0x2B	; 43
 3ca:	b8 01       	movw	r22, r16
 3cc:	45 e0       	ldi	r20, 0x05	; 5
 3ce:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 3d2:	c9 82       	std	Y+1, r12	; 0x01
 3d4:	da 82       	std	Y+2, r13	; 0x02
 3d6:	eb 82       	std	Y+3, r14	; 0x03
 3d8:	ec 82       	std	Y+4, r14	; 0x04
 3da:	fd 82       	std	Y+5, r15	; 0x05
 3dc:	80 e3       	ldi	r24, 0x30	; 48
 3de:	b8 01       	movw	r22, r16
 3e0:	45 e0       	ldi	r20, 0x05	; 5
 3e2:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 3e6:	8d e1       	ldi	r24, 0x1D	; 29
 3e8:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 3ec:	88 23       	and	r24, r24
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <RFM73_Initialize+0xbc>
 3f0:	80 e5       	ldi	r24, 0x50	; 80
 3f2:	63 e7       	ldi	r22, 0x73	; 115
 3f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 3f8:	8d e3       	ldi	r24, 0x3D	; 61
 3fa:	67 e0       	ldi	r22, 0x07	; 7
 3fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 400:	8c e3       	ldi	r24, 0x3C	; 60
 402:	6f e3       	ldi	r22, 0x3F	; 63
 404:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 87 01 	call	0x30e	; 0x30e <SwitchCFG>
 40e:	00 e6       	ldi	r16, 0x60	; 96
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	7e 01       	movw	r14, r28
 416:	08 94       	sec
 418:	e1 1c       	adc	r14, r1
 41a:	f1 1c       	adc	r15, r1
 41c:	f8 01       	movw	r30, r16
 41e:	21 91       	ld	r18, Z+
 420:	31 91       	ld	r19, Z+
 422:	41 91       	ld	r20, Z+
 424:	51 91       	ld	r21, Z+
 426:	8f 01       	movw	r16, r30
 428:	29 83       	std	Y+1, r18	; 0x01
 42a:	3a 83       	std	Y+2, r19	; 0x02
 42c:	4b 83       	std	Y+3, r20	; 0x03
 42e:	5c 83       	std	Y+4, r21	; 0x04
 430:	89 2f       	mov	r24, r25
 432:	80 62       	ori	r24, 0x20	; 32
 434:	b7 01       	movw	r22, r14
 436:	44 e0       	ldi	r20, 0x04	; 4
 438:	9d 87       	std	Y+13, r25	; 0x0d
 43a:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 43e:	9d 85       	ldd	r25, Y+13	; 0x0d
 440:	9f 5f       	subi	r25, 0xFF	; 255
 442:	99 30       	cpi	r25, 0x09	; 9
 444:	59 f7       	brne	.-42     	; 0x41c <RFM73_Initialize+0xe0>
 446:	84 e8       	ldi	r24, 0x84	; 132
 448:	e8 2e       	mov	r14, r24
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	f8 2e       	mov	r15, r24
 44e:	8e 01       	movw	r16, r28
 450:	0f 5f       	subi	r16, 0xFF	; 255
 452:	1f 4f       	sbci	r17, 0xFF	; 255
 454:	f7 01       	movw	r30, r14
 456:	21 91       	ld	r18, Z+
 458:	31 91       	ld	r19, Z+
 45a:	41 91       	ld	r20, Z+
 45c:	51 91       	ld	r21, Z+
 45e:	7f 01       	movw	r14, r30
 460:	59 83       	std	Y+1, r21	; 0x01
 462:	4a 83       	std	Y+2, r20	; 0x02
 464:	3b 83       	std	Y+3, r19	; 0x03
 466:	2c 83       	std	Y+4, r18	; 0x04
 468:	89 2f       	mov	r24, r25
 46a:	80 62       	ori	r24, 0x20	; 32
 46c:	b8 01       	movw	r22, r16
 46e:	44 e0       	ldi	r20, 0x04	; 4
 470:	9d 87       	std	Y+13, r25	; 0x0d
 472:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 476:	9d 85       	ldd	r25, Y+13	; 0x0d
 478:	9f 5f       	subi	r25, 0xFF	; 255
 47a:	9e 30       	cpi	r25, 0x0E	; 14
 47c:	59 f7       	brne	.-42     	; 0x454 <RFM73_Initialize+0x118>
 47e:	e8 e9       	ldi	r30, 0x98	; 152
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	d8 01       	movw	r26, r16
 484:	81 91       	ld	r24, Z+
 486:	8d 93       	st	X+, r24
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	e3 3a       	cpi	r30, 0xA3	; 163
 48c:	f8 07       	cpc	r31, r24
 48e:	d1 f7       	brne	.-12     	; 0x484 <__stack+0x25>
 490:	8e e2       	ldi	r24, 0x2E	; 46
 492:	8e 01       	movw	r16, r28
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	b8 01       	movw	r22, r16
 49a:	4b e0       	ldi	r20, 0x0B	; 11
 49c:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 4a0:	86 e9       	ldi	r24, 0x96	; 150
 4a2:	8a 83       	std	Y+2, r24	; 0x02
 4a4:	82 e8       	ldi	r24, 0x82	; 130
 4a6:	8b 83       	std	Y+3, r24	; 0x03
 4a8:	8b e1       	ldi	r24, 0x1B	; 27
 4aa:	8c 83       	std	Y+4, r24	; 0x04
 4ac:	8f ed       	ldi	r24, 0xDF	; 223
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	84 e2       	ldi	r24, 0x24	; 36
 4b2:	b8 01       	movw	r22, r16
 4b4:	44 e0       	ldi	r20, 0x04	; 4
 4b6:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	89 7f       	andi	r24, 0xF9	; 249
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	84 e2       	ldi	r24, 0x24	; 36
 4c2:	b8 01       	movw	r22, r16
 4c4:	44 e0       	ldi	r20, 0x04	; 4
 4c6:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 4ca:	e3 ed       	ldi	r30, 0xD3	; 211
 4cc:	f0 e3       	ldi	r31, 0x30	; 48
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <__stack+0x6f>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__stack+0x75>
 4d4:	00 00       	nop
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 87 01 	call	0x30e	; 0x30e <SwitchCFG>
 4dc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SwitchToRxMode>
 4e0:	2d 96       	adiw	r28, 0x0d	; 13
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	cf 91       	pop	r28
 4ee:	df 91       	pop	r29
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <Send_Packet>:
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	1f 93       	push	r17
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	0f 92       	push	r0
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	18 2f       	mov	r17, r24
 510:	7b 01       	movw	r14, r22
 512:	49 83       	std	Y+1, r20	; 0x01
 514:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SwitchToTxMode>
 518:	87 e1       	ldi	r24, 0x17	; 23
 51a:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 51e:	49 81       	ldd	r20, Y+1	; 0x01
 520:	85 fd       	sbrc	r24, 5
 522:	0a c0       	rjmp	.+20     	; 0x538 <Send_Packet+0x3a>
 524:	81 2f       	mov	r24, r17
 526:	b7 01       	movw	r22, r14
 528:	0e 94 3a 01 	call	0x274	; 0x274 <SPI_Write_Buf>
 52c:	87 ea       	ldi	r24, 0xA7	; 167
 52e:	91 e6       	ldi	r25, 0x61	; 97
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <Send_Packet+0x32>
 534:	00 c0       	rjmp	.+0      	; 0x536 <Send_Packet+0x38>
 536:	00 00       	nop
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0f 90       	pop	r0
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	1f 91       	pop	r17
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <Receive_Packet>:
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ec 01       	movw	r28, r24
 552:	87 e0       	ldi	r24, 0x07	; 7
 554:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 558:	08 2f       	mov	r16, r24
 55a:	86 ff       	sbrs	r24, 6
 55c:	16 c0       	rjmp	.+44     	; 0x58a <Receive_Packet+0x42>
 55e:	80 e6       	ldi	r24, 0x60	; 96
 560:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 564:	18 2f       	mov	r17, r24
 566:	81 32       	cpi	r24, 0x21	; 33
 568:	30 f4       	brcc	.+12     	; 0x576 <Receive_Packet+0x2e>
 56a:	81 e6       	ldi	r24, 0x61	; 97
 56c:	be 01       	movw	r22, r28
 56e:	41 2f       	mov	r20, r17
 570:	0e 94 13 01 	call	0x226	; 0x226 <SPI_Read_Buf>
 574:	04 c0       	rjmp	.+8      	; 0x57e <Receive_Packet+0x36>
 576:	82 ee       	ldi	r24, 0xE2	; 226
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 57e:	87 e1       	ldi	r24, 0x17	; 23
 580:	0e 94 09 01 	call	0x212	; 0x212 <SPI_Read_Reg>
 584:	80 ff       	sbrs	r24, 0
 586:	eb cf       	rjmp	.-42     	; 0x55e <Receive_Packet+0x16>
 588:	01 c0       	rjmp	.+2      	; 0x58c <Receive_Packet+0x44>
 58a:	10 e0       	ldi	r17, 0x00	; 0
 58c:	87 e2       	ldi	r24, 0x27	; 39
 58e:	60 2f       	mov	r22, r16
 590:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Write_Reg>
 594:	81 2f       	mov	r24, r17
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
